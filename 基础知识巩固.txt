础知识巩固

http://blog.csdn.net/jackfrued/article/details/44921941

1，String和StringBuffer的区别
他们都可以存储和操作字符串，即包括多个字符的字符数据。String是一个final类型的，里面的值不可改变。
而StringBuffer提供对字符串的修改。当你知道字符数据要改变的时候可以使用StringBuffer类，动态构建字符串。

2，运行时异常和一般异常
异常表示java运行过程中可能出现的一些错误。运行时异常表示虚拟机运行时可能抛出的一些异常情况，是一种常
见的运行时错误。
java编译器必须要求方法声明时抛出可能发生的非运行时异常。

3，servlet的生命周期
servlet被服务器实例化后，容器运行其init方法，接受到请求是调用service方法来处理，service自动选择是调用
doGet还是doPost方法。service可以被调用多次。当服务器决定将实例销毁的时候调用其destroy方法。

4，说出ArrayList,Vector, LinkedList的存储性能和特性
Collection下的三大类。
ArrayList,Vector都是使用数组方式存储数据，此数据元素数大于实际存储的数组内容，便于增加和插入数据。
他们都允许直接按序号索引元素，但是插入元素要涉及数组元素移动等内存操作，所以索引快插入慢。
Vector是synchronized(线程安全),通常性能上较ArrayList慢。线程安全效率就低。
LinkedList是使用双向链表实现存储，按序号索引数据需要向前或向后遍历数据，但是插入数据只需要记录插入时的
前项和后项即可，所以插入的速度快。

5，Collection和Collections的区别
Collection是LIST,SET的上级接口
Collections是针对集合类的一个工具类，用来对集合进行排序，反转，线程安全等操作。

6,final, finally, finalize的区别。 
final 用于声明属性，方法和类，分别表示属性不可变，方法不可覆盖，类不可继承。
finally是异常处理语句结构的一部分，表示总是执行。
finalize是Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法，可以覆盖此方法提供垃圾收集时的其他资源回收，例如关闭文件等。

7,HashMap和Hashtable的区别。 
HashMap是Hashtable的轻量级实现（非线程安全的实现），他们都完成了Map接口，主要区别在于HashMap允许空（null）键值（key）,由于非线程安全，效率上可能高于Hashtable。
HashMap允许将null作为一个entry的key或者value，而Hashtable不允许。
HashMap把Hashtable的contains方法去掉了，改成containsvalue和containsKey。因为contains方法容易让人引起误解。 

8,sleep() 和 wait() 有什么区别? 
sleep是线程类（Thread）的方法，导致此线程暂停执行指定时间，给执行机会给其他线程，但是监控状态依然保持，到时后会自动恢复。调用sleep不会释放对象锁。
wait是Object类的方法，对此对象调用wait方法导致本线程放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象发出notify方法（或notifyAll）后本线程才进入对象锁定池准备获得对象锁进入运行状态。

9,int和Integer有什么区别？ 
	public static void main(String[] args) {
        Integer a = new Integer(3);
        Integer b = 3;                  // 将3自动装箱成Integer类型
        int c = 3;
        System.out.println(a == b);     // false 两个引用没有引用同一对象
        System.out.println(a == c);     // true a自动拆箱成int类型再和c比较
    }
简单的说，如果整型字面量的值在-128到127之间，那么不会new新的Integer对象，而是直接引用常量池中的Integer对象
10,解释内存中的栈(stack)、堆(heap)和方法区(method area)的用法。 

通常我们定义一个基本数据类型的变量，一个对象的引用，还有就是函数调用的现场保存都使用JVM中的栈空间；而通过new关键字和构造器创建的对象则放在堆空间，堆是垃圾收集器管理的主要区域，由于现在的垃圾收集器都采用分代收集算法，所以堆空间还可以细分为新生代和老生代.方法区和堆都是各个线程共享的内存区域，用于存储已经被JVM加载的类信息、常量、静态变量、JIT编译器编译后的代码等数据；程序中的字面量（literal）如直接书写的100、"hello"和常量都是放在常量池中，常量池是方法区的一部分。栈空间操作起来最快但是栈很小，通常大量的对象都是放在堆空间，栈和堆的大小都可以通过JVM的启动参数来进行调整，栈空间用光了会引发StackOverflowError，而堆和常量池空间不足则会引发OutOfMemoryError。

11,用最有效率的方法计算2乘以8？ 
2<<3

12,构造器（constructor）是否可被重写（override）？ 
构造器不能被继承，所以不能被重写，但可以被重载。

13，两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，这句话对不对？ 
不对，如果两个对象x和y满足x.equals(y) == true，它们的哈希码（hash code）应当相同。Java对于eqauls方法和hashCode方法是这样规定的：(1)如果两个对象相同（equals方法返回true），那么它们的hashCode值一定要相同；(2)如果两个对象的hashCode相同，它们并不一定相同。

14，当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？ 
是值传递。Java语言的方法调用只支持参数的值传递。当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。对象的属性可以在被调用过程中被改变，但对对象引用的改变是不会影响到调用者的。

15，描述一下JVM加载class文件的原理机制？
jvm中类的加载是由类加载器*(ClassLoader)和他的子类来实现的。java中的类加载器是一个重要的java运行时系统组件。他负责在运行时查找和装入类文件中的类。由于java的跨平台性，编译后的源文件并不是一个可运行的程序，而是一个或多个类文件。当java程序需要使用某个类时，JVM会确保这个类已经被加载，连接(验证，准备，解析)和初始化。类的加载是指把类的.class文件中的数据读到内存中，通常是创建一个字节数组读入.class文件，然后产生与所加载类对应的class对象。加载完成后，class类还不完整，所以class对象还不可用。当类被加载后就进去连接阶段，这一阶段包括验证，准备(为静态变量分配内存被设置默认的初始值)和解析(将符号引用替换为直接引用)三个步骤。最后JVM对类进行初始化。包括：1，如果类存在直接的父类并且这个父类还没有被初始化，那么先对父类进行初始化。2，如果类中有初始化语句，则依次执行这些初始化语句。类的加载是由类加载器完成的。

16，抽象类（abstract class）和接口（interface）有什么异同？
抽象类和接口都不能被实例化，但可以定义抽象类和接口类 型的引用。一个类如果继承了抽象类或者实现了某个接口都需要对其中的抽象方法进行全部实现，否则该类仍得被声明为抽象类。接口比抽象类更加抽象。因为抽象类中可以定义构造器。可以由抽象方法和具体方法。而接口中不能定义构造器而且其中的方法全部为抽象方法。接口中的成员全部是public。抽象类中可以定义成员变量。而接口中的成员变量实际上都是常量。有抽象方法的类必须被声明为抽象类，而抽象类不一定有抽象方法。

17，Java 中会存在内存泄漏吗，请简单描述。
理论上java存在垃圾回收机制(GC)，不会出现内存泄漏问题，然而在实际开发中，可能会存在无用但可达的对象，这些对象不会被GC回收，因此也会导致内存泄漏的发生。例如hibernate中的session(一级缓存)属于持久态对象，垃圾回收器是不会回收这些对象的。然而这些对象中可能存在无用的垃圾对象，如果不及时关闭或清空一级缓存就可能导致内存泄漏。

18，阐述静态变量和实例变量的区别。
静态变量是被static修饰符修饰的变量，也称为类变量，它属于类，不属于类的任何一个对象，一个类不管创建多少个对象，静态变量在内存中有且仅有一个拷贝；实例变量必须依存于某一实例，需要先创建对象然后通过对象才能访问到它。静态变量可以实现让多个对象共享内存。

19，怎样将GB2312编码的字符串转换为ISO-8859-1编码的字符串？
String s1 = "你好";
String s2 = new String(s1.getBytes("GB2312"), "ISO-8859-1");

20，String和StringBuilder、StringBuffer的区别？ 
Java平台提供了两种类型的字符串：String和StringBuffer/StringBuilder，它们可以储存和操作字符串。其中String是只读字符串，也就意味着String引用的字符串内容是不能被改变的。而StringBuffer,StringBuilder类表示的字符串对象可以直接进行修改。StringBuilder是Java 5中引入的，它和StringBuffer的方法完全相同，区别在于它是在单线程环境下使用的，因为它的所有方面都没有被synchronized修饰，因此它的效率也比StringBuffer要高。
String.intern()  当调用 intern 方法时，如果池已经包含一个等于此 String 对象的字符串（用 equals(Object) 方法确定），则返回池中的字符串。否则，将此 String 对象添加到池中，并返回此 String 对象的引用。 


21,什么情况下用+运算符进行字符串连接比调用StringBuffer/StringBuilder对象的append方法连接字符串性能更好
如果使用少量的字符串操作，使用 (+运算符)连接字符串；
如果频繁的对大量字符串进行操作，则使用
1)：全局变量或者需要多线程支持则使用StringBuffer；
2)：局部变量或者单线程不涉及线程安全则使有StringBuilder。

22，日期和时间：
- 如何取得年月日、小时分钟秒？
public class DateTimeTest {
    public static void main(String[] args) {
        Calendar cal = Calendar.getInstance();
        System.out.println(cal.get(Calendar.YEAR));
        System.out.println(cal.get(Calendar.MONTH));    // 0 - 11
        System.out.println(cal.get(Calendar.DATE));
        System.out.println(cal.get(Calendar.HOUR_OF_DAY));
        System.out.println(cal.get(Calendar.MINUTE));
        System.out.println(cal.get(Calendar.SECOND));

        // Java 8
        LocalDateTime dt = LocalDateTime.now();
        System.out.println(dt.getYear());
        System.out.println(dt.getMonthValue());     // 1 - 12
        System.out.println(dt.getDayOfMonth());
        System.out.println(dt.getHour());
        System.out.println(dt.getMinute());
        System.out.println(dt.getSecond());
    }
}
- 如何取得从1970年1月1日0时0分0秒到现在的毫秒数？
        Long millis1=Calendar.getInstance().getTimeInMillis();
        Long millis2=System.currentTimeMillis();
        Long millis3=Clock.systemDefaultZone().millis(); // Java 8
- 如何取得某月的最后一天？
		Calendar time = Calendar.getInstance();
		int dayodmonth=time.getActualMaximum(Calendar.DAY_OF_MONTH);
		System.out.println(dayodmonth);
- 如何格式化日期？
		SimpleDateFormat oldFormatter = new SimpleDateFormat("yyyy-MM-dd");
		Date date1 = new Date();
		System.out.println(oldFormatter.format(date1));
		// Java 8
        DateTimeFormatter newFormatter = DateTimeFormatter.ofPattern("yyyy/MM/dd");
        LocalDate date2 = LocalDate.now();
        System.out.println(date2.format(newFormatter));
23，打印昨天的当前时刻。
		Calendar time = Calendar.getInstance();
		time.add(Calendar.DATE, -1);
		System.out.println(time.getTime());
		// java 8
		LocalDateTime today = LocalDateTime.now();
		LocalDateTime yesterday = today.minusDays(1);
		System.out.println(yesterday);

24，Error和Exception有什么区别？
Error表示系统级的错误和程序不必处理的异常，是 恢复不是不可能但很困难 的情况下的一种严重问题；比如内存溢出，不可能指望程序能处理这样的情况；Exception表示需要捕捉或者需要程序进行处理的异常，是一种设计或实现问题；也就是说，它表示如果程序运行正常，从不会发生的情况。

25，try{}里有一个return语句，那么紧跟在这个try后的finally{}里的代码会不会被执行，什么时候被执行，在return前还是后?
会执行，在方法返回调用者前执行。 
在finally中改变返回值的做法是不好的，因为如果存在finally代码块，try中的return语句不会立马返回调用者，而是记录下返回值待finally代码块执行完毕之后再向调用者返回其值，然后如果在finally中修改了返回值，就会返回修改后的值。显然，在finally中返回或者修改返回值会对程序造成很大的困扰

26，Java语言如何进行异常处理，关键字：throws、throw、try、catch、finally分别如何使用？
java面向对象的方法进行异常处理，把各种不同的异常进行分类，并提供了良好的接口。在java中，每个异常都是一个对象，他是Throwable类或其子类的实例。当一个方法出现异常后便抛出一个异常对象，该对象中包含有异常信息，调用这个对象的方法可以捕获到这个异常并可以对其进行处理。java的异常处理是通过5个关键词来实现的：try,catch,throw,throws和finally.一般情况下是用try来执行一段程序，如果系统会抛出(throw)一个异常对象，可以通过它的类型来捕获(catch)它，或通过总是执行代码块(finally)来处理。try用来指定一块预防所有异常的程序，catch子句紧跟在try块后面，用来指定你想要捕获的异常的类型。throw语句用来明确地抛出一个异常。throws用来声明一个方法可能抛出的各种异常。finally为确保一段代码不管发生什么异常状况都要被执行。try语句可以嵌套，每当遇到一个try语句，异常的结构就会被放入异常栈中，直到所有的try语句都完成。如果下一级的try语句没有对某种异常进行处理，异常栈就会执行出栈操作，直到遇到有处理这种异常的try语句或者最终将异常抛给JVM.

27，列出一些你常见的运行时异常？	
ArithmeticException（算术异常）
- ClassCastException （类转换异常）
- IllegalArgumentException （非法参数异常）
- IndexOutOfBoundsException （下标越界异常）
- NullPointerException （空指针异常）
- SecurityException （安全异常）

28，阐述final、finally、finalize的区别。
- final：修饰符（关键字）有三种用法：如果一个类被声明为final，意味着它不能再派生出新的子类，即不能被继承，因此它和abstract是反义词。将变量声明为final，可以保证它们在使用中不被改变，被声明为final的变量必须在声明时给定初值，而在以后的引用中只能读取不可修改。被声明为final的方法也同样只能使用，不能在子类中被重写。
- finally：通常放在try…catch…的后面构造总是执行代码块，这就意味着程序无论正常执行还是发生异常，这里的代码只要JVM不关闭都能执行，可以将释放外部资源的代码写在finally块中。
- finalize：Object类中定义的方法，Java中允许使用finalize()方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。这个方法是由垃圾收集器在销毁对象时调用的，通过重写finalize()方法可以整理系统资源或者执行其他清理工作。

29，TreeMap和TreeSet在排序时如何比较元素？Collections工具类中的sort()方法如何比较元素？
TreeSet要求存放的对象所属的类必须实现comparable接口，该接口提供了比较元素的compareTo方法，当插入元素时会回调该方法比较元素的大小。TreeMap要求存入的键值对映射的键必须实现comparable接口，以便根据键对元素进行排序。Collections工具类的sort方法有两种重载形式，第一种要求传入的待排序容器中存放的对象必须实现comparable接口以实现元素的比较。第二种不强制性的要求容器中的元素必须可比较，但是要求传入第二个参数，参数是Comparator接口的子类型（需要重写compare方法实现元素的比较），相当于一个临时定义的排序规则，其实就是通过接口注入比较元素大小的算法，也是对回调模式的应用（Java中对函数式编程的支持）。 
