0322总结
MyBatis
     关联查询
	     一对一查询
		 案例：查询所有订单信息，关联查询下单用户信息。
		 注意：因为一个订单信息只会是一个人下的订单，所以从查询订单信息出发关联查询用户信息为一对一查询。
		       如果从用户信息出发查询用户下的订单信息则为一对多查询，因为一个用户可以下多个订单。
			     a,使用resultType，定义订单信息po类，此po类中包括了订单信息和用户信息：
						SELECT 
						  orders.*,
						  user.username,
						  userss.address
						FROM
						  orders,
						  user 
						WHERE orders.user_id = user.id
				b,定义Po类
				    Po类中应该包括上边sql查询出来的所有字段，如下：
					public class OrdersCustom extends Orders {

						private String username;// 用户名称
						private String address;// 用户地址
						get/set。。。。
					OrdersCustom类继承Orders类后OrdersCustom类包括了Orders类的所有字段，只需要定义用户的信息字段即可。
				c.mapper.xml
				<!-- 查询所有订单信息 -->
					<select id="findOrdersList" resultType="cn.itcast.mybatis.po.OrdersCustom">
					SELECT
					orders.*,
					user.username,
					user.address
					FROM
					orders,	user
					WHERE orders.user_id = user.id 
					</select>
				d,mapper接口
				  public List<OrdersCustom> findOrdersList() throws Exception;
				e,测试
					Public void testfindOrdersList()throws Exception{
						//获取session
						SqlSession session = sqlSessionFactory.openSession();
						//获限mapper接口实例
						UserMapper userMapper = session.getMapper(UserMapper.class);
						//查询订单信息
						List<OrdersCustom> list = userMapper.findOrdersList();
						System.out.println(list);
						//关闭session
						session.close();
					}
		定义专门的po类作为输出类型，其中定义了sql查询结果集所有的字段。此方法较为简单，企业中使用普遍。
		使用resultMap
		    使用resultMap，定义专门的resultMap用于映射一对一查询结果。
			1,在Orders类中加入User属性，user属性中用于存储关联查询的用户信息，因为订单关联查询用户是一对一关系，
			所以这里使用单个User对象存储关联查询的用户信息。
			2,mapper.xml
					<select id="findOrdersListResultMap" resultMap="userordermap">
						SELECT
						orders.*,
						user.username,
						user.address
						FROM
						orders,	user
						WHERE orders.user_id = user.id 
					</select>
				    这里resultMap指定userordermap。		
            3,定义resultMap
                需要关联查询映射的是用户信息，使用association将用户信息映射到订单对象的用户属性中。
                <!-- 订单信息resultmap -->
					<resultMap type="cn.itcast.mybatis.po.Orders" id="userordermap">
						<!-- 这里的id，是mybatis在进行一对一查询时将user字段映射为user对象时要使用，必须写 -->
						<id property="id" column="id"/>
						<result property="user_id" column="user_id"/>
						<result property="number" column="number"/>
						<association property="user" javaType="cn.itcast.mybatis.po.User">
						<!-- 这里的id为user的id，如果写上表示给user的id属性赋值 -->
						<id property="id" column="user_id"/>
						<result property="username" column="username"/>
						<result property="address" column="address"/>
						</association>
					</resultMap>		
                association：表示进行关联查询单条记录
				property：表示关联查询的结果存储在cn.itcast.mybatis.po.Orders的user属性中
				javaType：表示关联查询的结果类型
				<id property="id" column="user_id"/>：查询结果的user_id列对应关联对象的id属性，这里是<id />表示user_id是关联查询对象的唯一标识。
				<result property="username" column="username"/>：查询结果的username列对应关联对象的username属性。	
            4,mapper接口
                public List<Orders> findOrdersListResultMap() throws Exception;		
==============================================================================================================================================	
JSP
        JSP三大指令
           page:
		     pageEncoding和contentType
			 pageEncoding:指定当前JSP页面的编码。在服务器要把jsp编译成Java是需要使用 pageEncoding;
			 contentType:表示添加一个响应头
           include
           taglib		   